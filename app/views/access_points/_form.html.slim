= nested_form_for(@access_point, html: {class: "form-horizontal form-bordered"}) do |f|
  .row
    .col-sm-6
      .form-group
        = f.label :zone, class: "col-sm-2 control-label", style: "text-align: left"
        .col-sm-8
          = f.select :zone_id,options_from_collection_for_select(Zone.all, "id", "name"), { class: 'form-control'}
      .form-group
        = f.label :ssid, class: "col-sm-2 control-label", style: "text-align: left"
        .col-sm-8
          = f.text_field :ssid, class: "form-control"
      .form-group
        = f.label :ip_address, class: "col-sm-2 control-label", style: "text-align: left"
        .col-sm-8
          = f.text_field :ip_address, class: "form-control"
      .form-group
        = f.label :mac_address, class: "col-sm-2 control-label", style: "text-align: left"
        .col-sm-8
          = f.text_field :mac_address, class: "form-control"

    .col-sm-6
      = f.fields_for :coordinate do |ff|
        = ff.hidden_field :latitude, required: true
        = ff.hidden_field :longitude, required: true
      #router style=("width: 100%; height: 300px;")
  .row
    .col-sm-6
      - input_class_centers = 'form-control no-border-left no-border-right'
      table
        tr
          th
          th = 'Minimo'
          th = 'Maximo'
          th = 'Bajo'
          th = 'Medio'
          th = 'Alto'
        tr
          td = 'Jitter'
          td = number_field_tag :min_jitter,@min_jitter, class: 'form-control no-border-right', placeholder: 'min'
          td = number_field_tag :max_jitter,@max_jitter, class: input_class_centers, placeholder: 'max'
          td = number_field_tag :low_jitter, @low_jitter, class: input_class_centers, placeholder: 'low'
          td = number_field_tag :mid_jitter, @mid_jitter, class: input_class_centers, placeholder: 'mid'
          td = number_field_tag :high_jitter, @high_jitter, class: 'form-control no-border-left', placeholder: 'high'
        tr
          td = 'RTT'
          td = number_field_tag :min_ping, @min_ping, class: 'form-control no-border-right', placeholder: 'min'
          td = number_field_tag :max_ping, @max_ping, class: input_class_centers, placeholder: 'max'
          td = number_field_tag :low_ping, @low_ping, class: input_class_centers, placeholder: 'low'
          td = number_field_tag :mid_ping, @mid_ping, class: input_class_centers, placeholder: 'mid'
          td = number_field_tag :high_ping, @high_ping, class: 'form-control no-border-left', placeholder: 'high'
        tr
          td = 'Latencia'
          td = number_field_tag :min_latency, @min_latency, class: 'form-control no-border-right', placeholder: 'min'
          td = number_field_tag :max_latency, @max_latency, class: input_class_centers, placeholder: 'max'
          td = number_field_tag :low_latency, @low_latency, class: input_class_centers, placeholder: 'low'
          td = number_field_tag :mid_latency, @mid_latency, class: input_class_centers, placeholder: 'mid'
          td = number_field_tag :high_latency, @high_latency, class: 'form-control no-border-left', placeholder: 'high'
        tr
          td = 'Velocidad de enlace'
          td = number_field_tag :min_link_speed, @min_link_speed, class: 'form-control no-border-right', placeholder: 'min'
          td = number_field_tag :max_link_speed, @max_link_speed, class: input_class_centers, placeholder: 'max'
          td = number_field_tag :low_link_speed, @low_link_speed, class: input_class_centers, placeholder: 'low'
          td = number_field_tag :mid_link_speed, @mid_link_speed, class: input_class_centers, placeholder: 'mid'
          td = number_field_tag :high_link_speed, @high_link_speed, class: 'form-control no-border-left', placeholder: 'high'
        tr
          td = 'Nivel de senal'
          td = number_field_tag :min_sign_level, @min_sign_level, class: 'form-control no-border-right', placeholder: 'min'
          td = number_field_tag :max_sign_level, @max_sign_level, class: input_class_centers, placeholder: 'max'
          td = number_field_tag :low_sing_level, @low_sing_level, class: input_class_centers, placeholder: 'low'
          td = number_field_tag :mid_sing_level, @mid_sing_level, class: input_class_centers, placeholder: 'mid'
          td = number_field_tag :high_link_speed, @high_link_speed, class: 'form-control no-border-left', placeholder: 'high'
    .input-group.mb-15
      .col-sm-4
        | Distancia
      .col-sm-8
        = number_field_tag :distance, @distance, class: 'form-control', min: 0
    .col-sm-6
      = f.link_to_add "Agregar canal", :channels
      = f.fields_for :channels do |channel|
        .form-group
          = channel.label :bssid, class: "col-sm-2 control-label", style: "text-align: left"
          .col-sm-6
            = channel.text_field :bssid, class: "form-control"
          .col-sm-2
            = channel.link_to_remove "quitar", class: 'btn btn-danger'
      .form-group
        .pull-right
          = link_to "Cancelar", :back ,class: "btn btn-danger mr-5"
          = f.submit "Guardar", class: "btn btn-success mr-5"

javascript:
  var limits = []
  var points = []
  var point = []
  $('#access_point_zone_id').change(function(){
    map.removePolygons();
    get_zone(this)
  });

  function get_zone(zone){
    $.ajax({
      type: "GET",
      url:  "#{api_data_zone_path}",
      data: {
        id: zone.options[zone.selectedIndex].value
      },
      success: function(data, textStatus, jqXHR){
        drawArea(data);
      },
      error: function(jqXHR, textStatus, errorThrown){
        console.log("no guardo");
      }
    });
  }

  function drawArea(set_points){
    points = set_points
    limits = map.drawPolygon({
      paths: set_points
    })
  }

  function polygonCenter() {
    var lowx,
        highx,
        lowy,
        highy,
        lats = [],
        lngs = []

    for(var i=0; i<limits.length; i++) {
      lats.push(limits[i][0]);
      lngs.push(limits[i][1]);
    }

    lats.sort();
    lngs.sort();
    lowx = lats[0];
    highx = lats[points.length - 1];
    lowy = lngs[0];
    highy = lngs[points.length - 1];
    center_x = lowx + ((highx-lowx) / 2);
    center_y = lowy + ((highy - lowy) / 2);
    return (new google.maps.LatLng(center_x, center_y));
  }

  var map = new GMaps({
    el: '#router',
    lat:  #{Setting.center[0]},
    lng:  #{Setting.center[1]},
    disableDefaultUI: true,
    styles: [
      {
        "featureType": "poi",
        "stylers": [
          { "visibility": "off" }
        ]
      }
    ],
  });

  $(document).ready(function(){
    drawArea(#{ @access_point.zone.present? ? @access_point.zone.coordinates.map  { |z| [z.latitude, z.longitude] } : Zone.first.coordinates.map  { |z| [z.latitude, z.longitude] } })

    point = map.addMarker({
      lat:  #{Setting.center[0]},
      lng:  #{Setting.center[1]},
      icon: "#{ asset_path('router-logo.png') }",
      draggable: true,
      fences: [limits],
      outside: function(){
        alert('El punto esta fuera del marco')
      }
    });

    point.addListener('drag',function(event){
      $('#access_point_coordinate_attributes_latitude').val(event.latLng.lat())
      $('#access_point_coordinate_attributes_longitude').val(event.latLng.lng())
    });
  })
