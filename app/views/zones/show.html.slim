.row
  .col-md-6
    #zone_map style=("width: 100%; height: 250px;")
  .col-md-6
    = line_chart @zone.access_points.map { |ap| { name: ap.ssid, data: ap.issues.group(:created_at).count } }
.row
  .col-md-6
    .panel.panel-default.panel-issue-tracker.shadow
      .panel-heading
        .pull-left
          h3.panel-title Equipos
        .clearfix
      .panel-body
        .table-responsive
          table.table.table-issue-tracker.table-middle
            tbody
              - @zone.access_points.each do |ap|
                tr
                  td
                    span.label.label-danger.rounded
                  td
                    = link_to ap.ip_address, ap
                    p.no-margin
                      | Direccion IP
                  td
                    = link_to ap.mac_address, ap
                    p.no-margin
                      | Mac Address
                  td
                    .label.label-danger.rounded
                      | Errores:
                      = ap.issues.count
                  td
                    .label.label-success.rounded
                      | Reportes:
                      = ap.datums.count
                  td
                    .label.label-default.rounded
                      span Usuarios:
                      = ap.users_average
  .col-md-6
    .panel.panel-default.panel-issue-tracker.shadow
      .panel-heading
        .pull-left
          h3.panel-title Promedio
        .clearfix
      .panel-body
        .table-responsive
          table.table.table-issue-tracker.table-middle
            tbody
              - @datos.each do |type, datos|
                tr
                  td
                    span.label.label-danger.rounded
                  td
                    = type.titleize
                  td
                    - unless type == "Ping"
                      - average = datos.map { |d| d.value.to_f }
                      = "#{(average.reduce(:+).to_f / average.count).to_s[0..5]} #{measure_for(type)}"
                    - else
                      - percent = datos.map { |d| d.percent }
                      p = "#{(percent.reduce(:+).to_f / percent.size.to_f).round(4)} #{measure_for(type)}"
javascript:
  var map = new GMaps({
    el: '#zone_map',
    lat:  #{Setting.center[0]},
    lng:  #{Setting.center[1]},
    zoom: 18,
    disableDefaultUI: true,
    styles: [
      {
        "featureType": "poi",
        "stylers": [
          { "visibility": "off" }
        ]
      }
    ],
  });


  function markArea(){
    map.removePolygons();
    map.drawPolygon({
      paths: #{ @zone.coordinates.map { |c| [c.latitude.to_f, c.longitude.to_f] } || [] },
      strokeColor: 'red'
    });
  }

  function markAp(){
    $.ajax({
      type: "POST",
      url:  "#{api_data_access_points_path}",
      success: function(data, textStatus, jqXHR){
        $.each(data,function(index, value){
          map.addMarker({
              lat: value.latitude,
              lng: value.longitude,
              icon: "#{ asset_path('router-logo.png') }",
              infoWindow: {
                content:  '<p>ssid: '+ value.ssid +'</p>' +
                          '<p>Ip: '+ value.ip +'</p>' +
                          '<p>Mac: '+ value.mac +'</p>' +
                          '<p>Lat: '+ value.latitude +'</p>' +
                          '<p>Lng: '+ value.longitude +'</p>'
              }
          });
          map.drawCircle({
            lat: value.latitude,
            lng: value.longitude,
            radius: 12
          })
        });
      },
      error: function(jqXHR, textStatus, errorThrown){
        console.log("no guardo");
      }
    });

  }

  $(document).ready(function(){
    markArea()
    markAp()
  })
